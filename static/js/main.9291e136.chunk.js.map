{"version":3,"sources":["components/NotePlayer.jsx","App.js","serviceWorker.js","index.js"],"names":["NotePlayer","_this","this","react_default","a","createElement","Button","onClick","props","playNote","note","text","Component","_Em","S6","S5","S4","S3","S2","S1","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","midiSounds","playChordNow","state","selectedInstrument","setState","initialized","e","list","target","n","options","selectedIndex","getAttribute","cacheInstrument","items","i","player","loader","instrumentKeys","length","push","key","value","instrumentInfo","title","playStrumDownNow","playStrumUpNow","playSnapNow","playChordAt","contextTime","_this2","className","Segment","inverted","Container","Header","as","content","style","fontWeight","marginBottom","marginTop","components_NotePlayer","onChange","onSelectInstrument","bind","createSelectItems","playCurSingle","playCurChord","playCurDown","playCurUp","playCurSnap","playCurStrings","playCurBass","midisoundsreact_default","ref","appElementName","instruments","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9291e136.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport './ChordPlayer.css';\nimport {Button} from \"semantic-ui-react\";\n\nclass NotePlayer extends Component {\n    render() {\n        return (\n            <Button onClick={() => this.props.playNote(this.props.note)}>{this.props.text}</Button>\n        );\n    }\n}\n\nexport default NotePlayer;\n\nNotePlayer.propTypes = {\n    note: PropTypes.number.isRequired, // 60 is a C\n    text: PropTypes.string.isRequired,\n    playNote: PropTypes.func.isRequired\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport NotePlayer from \"./components/NotePlayer\";\nimport {Container, Divider, Header, Segment} from \"semantic-ui-react\";\nimport MIDISounds from 'midi-sounds-react';\n\n\nconst O = 12;\n\nconst C = 0;\nconst c = 1;\nconst D = 2;\nconst d = 3;\nconst E = 4\nconst F = 5;\nconst f = 6;\nconst G = 7;\nconst g = 8;\nconst A = 9;\nconst a = 10;\nconst B = 11;\n\nconst S1 = 5 * O + E;\nconst S2 = 4 * O + B;\nconst S3 = 4 * O + G;\nconst S4 = 4 * O + D;\nconst S5 = 3 * O + A;\nconst S6 = 3 * O + E;\n\nconst X3 = 3 * O + G;\nconst X4 = 3 * O + D;\nconst X5 = 2 * O + A;\nconst X6 = 2 * O + E;\n\nconst _Em = [\n    S6 + 0\n    , S5 + 2\n    , S4 + 2\n    , S3 + 0\n    , S2 + 0\n    , S1 + 0\n];\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedInstrument: 260\n        };\n    }\n    componentDidMount() {\n        this.setState({ initialized: true });\n    }\n    onSelectInstrument(e){\n        var list=e.target;\n        let n = list.options[list.selectedIndex].getAttribute(\"value\");\n        this.setState({\n            selectedInstrument: n\n        });\n        this.midiSounds.cacheInstrument(n);\n    }\n    createSelectItems() {\n        if (this.midiSounds) {\n            if (!(this.items)) {\n                this.items = [];\n                for (let i = 0; i < this.midiSounds.player.loader.instrumentKeys().length; i++) {\n                    this.items.push(<option key={i} value={i}>{'' + (i + 0) + '. ' + this.midiSounds.player.loader.instrumentInfo(i).title}</option>);\n                }\n            }\n            return this.items;\n        }\n    }\n    playCurSingle() {\n        this.midiSounds.playChordNow(this.state.selectedInstrument, [4 * O + A], 2.5);\n    }\n    playCurChord() {\n        this.midiSounds.playChordNow(this.state.selectedInstrument, _Em, 2.5);\n    }\n    playCurDown() {\n        this.midiSounds.playStrumDownNow(this.state.selectedInstrument, _Em, 2.5);\n    }\n    playCurUp() {\n        this.midiSounds.playStrumUpNow(this.state.selectedInstrument, _Em, 2.5);\n    }\n    playCurSnap() {\n        this.midiSounds.playSnapNow(this.state.selectedInstrument, _Em, 2.5);\n    }\n    playCurStrings() {\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 0, this.state.selectedInstrument, [S6], 1);\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 1, this.state.selectedInstrument, [S5], 1);\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 2, this.state.selectedInstrument, [S4], 1);\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 3, this.state.selectedInstrument, [S3], 1);\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 4, this.state.selectedInstrument, [S2], 1);\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 5, this.state.selectedInstrument, [S1], 1);\n\n    }\n    playCurBass() {\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 0, this.state.selectedInstrument, [X6], 1);\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 1, this.state.selectedInstrument, [X5], 1);\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 2, this.state.selectedInstrument, [X4], 1);\n        this.midiSounds.playChordAt(this.midiSounds.contextTime() + 0.5 * 3, this.state.selectedInstrument, [X3], 1);\n\n    }\n    playNote = (note) => {\n        this.midiSounds.playChordNow(3, [note], 0.5);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Segment inverted>\n                <Container text>\n                    <Header\n                        as='h1'\n                        content='React Midi Player demo'\n                        inverted\n                        style={{\n                            fontWeight: 'normal',\n                            marginBottom: 0,\n                            marginTop:'1.5em',\n                        }}\n                    />\n                    <NotePlayer note=\"58\" text=\"Bb\" playNote={this.playNote}/>\n                    <NotePlayer note=\"59\" text=\"B\" playNote={this.playNote}/>\n                    <NotePlayer note=\"60\" text=\"C\" playNote={this.playNote}/>\n                    <NotePlayer note=\"61\" text=\"C#\" playNote={this.playNote}/>\n                    <NotePlayer note=\"62\" text=\"D\" playNote={this.playNote}/>\n                    <NotePlayer note=\"63\" text=\"Eb\" playNote={this.playNote}/>\n                    <NotePlayer note=\"64\" text=\"E\" playNote={this.playNote}/>\n                    <NotePlayer note=\"65\" text=\"F\" playNote={this.playNote}/>\n                    <NotePlayer note=\"66\" text=\"F#\" playNote={this.playNote}/>\n                    <NotePlayer note=\"67\" text=\"G\" playNote={this.playNote}/>\n                    <NotePlayer note=\"68\" text=\"G#\" playNote={this.playNote}/>\n                    <NotePlayer note=\"69\" text=\"A\" playNote={this.playNote}/>\n                    <NotePlayer note=\"70\" text=\"Bb\" playNote={this.playNote}/>\n                    <NotePlayer note=\"71\" text=\"B\" playNote={this.playNote}/>\n                    <NotePlayer note=\"72\" text=\"C'\" playNote={this.playNote}/>\n\n                    <p className=\"App-intro\">Select instrument and press a button.</p>\n                    <p><select value={this.state.selectedInstrument} onChange={this.onSelectInstrument.bind(this)}>{this.createSelectItems()}</select></p>\n                    <p>\n                        <button onClick={this.playCurSingle.bind(this)}>Single E</button>\n                        <button onClick={this.playCurChord.bind(this)}>Chord Em</button>\n                        <button onClick={this.playCurDown.bind(this)}>Down Em</button>\n                        <button onClick={this.playCurUp.bind(this)}>Up Em</button>\n                        <button onClick={this.playCurSnap.bind(this)}>Snap Em</button>\n                        <button onClick={this.playCurStrings.bind(this)}>Guitar Strings</button>\n                        <button onClick={this.playCurBass.bind(this)}>Bass Strings</button>\n                    </p>\n                    <p>Component</p>\n                    <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" instruments={[this.state.selectedInstrument]} />\n                    <hr/>\n                    <p>Sources: <a href={'https://www.npmjs.com/package/midi-sounds-react'}>https://www.npmjs.com/package/midi-sounds-react</a></p>\n\n                </Container>\n                </Segment>\n\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}